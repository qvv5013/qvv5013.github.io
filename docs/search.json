[
  {
    "objectID": "posts/Running-jobs-on-clusters/running-jobs-on-cluster.html",
    "href": "posts/Running-jobs-on-clusters/running-jobs-on-cluster.html",
    "title": "Running jobs on clusters",
    "section": "",
    "text": "Ares supercomputer\n\nCPU job script\n#!/bin/bash\n#SBATCH --partition plgrid\n#SBATCH --job-name cryosparc-master\n#SBATCH --nodes 1\n#SBATCH --ntasks-per-node 1\n#SBATCH --mem 15GB\n#SBATCH --time 72:00:00\n#SBATCH -C localfs\n#SBATCH -A plgrisa-cpu\n#SBATCH --dependency=singleton\n#SBATCH --output cryosparc-master-log-%J.txt\n#SBATCH --signal=B:2@240\n\necho \"Job run\" > test.txt\n\n\nGPU Job script\n\n\n\nPrometheus supercomputer\n\nCPU job\n\n\nGPU job scripts\n#!/bin/bash -l\n#SBATCH -J pGcat_SETINDEX\n#SBATCH -N 1\n#SBATCH --ntasks-per-node=1\n#SBATCH --mem-per-cpu=5GB\n#SBATCH --time=72:00:00\n#SBATCH -A plgribo3gpu\n#SBATCH --gres=gpu\n#SBATCH -p plgrid-gpu\n#SBATCH --output=output.out\n#SBATCH --error=error.err\ncd $SLURM_SUBMIT_DIR\nsrun /bin/hostname\n\nperl calc_entanglement_number.pl -i ../../setup/3cla_m_clean_ca.cor -t ../../SETINDEX/cat3_SETINDEX_prod.dcd -o ./"
  },
  {
    "objectID": "posts/Amino-acid-table/index.html",
    "href": "posts/Amino-acid-table/index.html",
    "title": "Amino acid table",
    "section": "",
    "text": "Amino acids table with their properties\n21 amino acids make up proteins.\n\n(Source: Wikipedia)"
  },
  {
    "objectID": "posts/linux-tips/linux_tips.html",
    "href": "posts/linux-tips/linux_tips.html",
    "title": "Some Linux commands frequently used",
    "section": "",
    "text": "This post contains some bash code-snippet to make my daily work easier.\n\nLoop through array\nIn case of looping through an continous list of number:\n#!/bin/bash\nfor i in {1..100}\ndo\n    # DO SOMETHING\ndone\nIf the list to loop is not continous, used the following form:\n#!/bin/bash\narr=( 3 4 9 10)\nfor i in \"${arr[@]}\"\ndo\n    echo $i       \n    #DONE SOMETHING HERE\ndone\nNote that arr definition is without whitespace.\n\n\nCounting number of lines in file\nSometime, after perform a long analysis of many simulations. We want to make sure if the analysis is done automatically, instead of looking into single file one-by-one, we can use bash script to do so.\n#!/bin/bash\nfor i in {1..100}\ndo\n        #echo \"$i\"\n        nl=$(wc -l < $i/G_traj_${i}.dat)\n        if [ $nl -eq 400008 ]; then\n                echo \"traj $i :  $nl --- DONE\"\n        else\n                echo \"traj $i :  $nl --- Has not been DONE\"\n        fi\n\ndone\nIn this example, we loop through all simulations (1 to 100) and use command: wc -l < $i/G_traj_${i}.dat to count the number of lines in file. we assign the output from this command to nl variable by packing previous command by $(command)\n\n\nSearch and replace in file\n#!/bin/bash\ncur_dir=`pwd`\nfor i in {1..100}\ndo\n        if [ -f \"/net/people/plgqvuvan/plggligroup/qvuvan/10proj/synthesize/cat3/wt/$i/traj/1/prot_l213_dissociation_final.cor\" ]; then\n                echo \"copy cor and vel file for run $i\"\n                rm -rf $i && mkdir $i\n                cp /net/people/plgqvuvan/plggligroup/qvuvan/10proj/synthesize/cat3/wt/$i/traj/1/prot_l213_dissociation_final.cor $i/\n                cp /net/people/plgqvuvan/plggligroup/qvuvan/10proj/synthesize/cat3/wt/$i/traj/1/prot_l213_dissociation_final.vel $i/\n                cp template/* $i/\n                sed \"s/SETINDEX/${i}/g\" -i ${i}/job_plgrid_gpu.sh\n                sed \"s/SETINDEX/${i}/g\" -i ${i}/control.cntrl\n        else\n                echo \"simulation $i is not finished\"\n        fi\ndone\n\nline 5: check if file prot_l213_dissociation_final.cor in specified directory existed. If yes, then run the code block.\nline 11-12: sed command used to search and replace pattern SETINDEX in file ${i}/job_plgrid_gpu.sh by value of variable $i"
  },
  {
    "objectID": "posts/Create-env-for-openmm-cg-simulations/Openmm-coarse-grained-simulations.html",
    "href": "posts/Create-env-for-openmm-cg-simulations/Openmm-coarse-grained-simulations.html",
    "title": "Openmm Coarse-grained Simulations",
    "section": "",
    "text": "#!/bin/bash\n#SBATCH --partition plgrid\n#SBATCH --job-name cryosparc-master\n#SBATCH --nodes 1\n#SBATCH --ntasks-per-node 1\n#SBATCH --mem 15GB\n#SBATCH --time 72:00:00\n#SBATCH -C localfs\n#SBATCH -A plgrisa-cpu\n#SBATCH --dependency=singleton\n#SBATCH --output cryosparc-master-log-%J.txt\n#SBATCH --signal=B:2@240\n\necho \"Job run\" > test.txt"
  },
  {
    "objectID": "posts/Create-env-for-openmm-cg-simulations/Openmm-coarse-grained-simulations.html#install-packages",
    "href": "posts/Create-env-for-openmm-cg-simulations/Openmm-coarse-grained-simulations.html#install-packages",
    "title": "Openmm Coarse-grained Simulations",
    "section": "Install packages",
    "text": "Install packages\nconda install -c openmm=7.7 parmed mdtraj\nNotes on cluster information:\n* local machine: (py310) openMM 7.7+ cudatoolkit 11.6\n* Plgrid: (py310) openMM 7.7+ cudatoolkit 10.2\n* ACI: (base) OpenMM 7.7+ cudatoolkit 11.7\n* Ares: openMM 7.7 + cudatoolkit 11.6 ( GPU Tesla V100)\n\nJob with GPU\n#!/bin/bash\n#SBATCH --job-name ares_gpu\n#SBATCH --nodes 1\n#SBATCH --partition plgrid-gpu-v100\n#SBATCH --gres=gpu:1\n#SBATCH --ntasks-per-node 1\n#SBATCH --mem 15GB\n#SBATCH --time 48:00:00\n#SBATCH -C localfs\n#SBATCH -A plgrisa-gpu\n#SBATCH --dependency=singleton\n#SBATCH --output cryosparc-master-log-%J.txt\n#SBATCH --signal=B:2@240\n\n## prometheus\n#source /net/people/plgqvuvan/anaconda3/etc/profile.d/conda.sh\n## ares\n\ncd $SLURM_SUBMIT_DIR\n\nconda init bash\nsource /net/people/plgrid/plgqvuvan/plggligroup/qvv5013/anaconda3/etc/profile.d/conda.sh\nconda activate py310\nmodule add cuda/11.6.0\necho \"NVIDIA-DRIVER version:\"`nvidia-smi`\n\npython single_run_extend.py -f control.cntrl"
  },
  {
    "objectID": "posts/Create-env-for-openmm-cg-simulations/Openmm-coarse-grained-simulations.html#interactive-mode-on-ares",
    "href": "posts/Create-env-for-openmm-cg-simulations/Openmm-coarse-grained-simulations.html#interactive-mode-on-ares",
    "title": "Openmm Coarse-grained Simulations",
    "section": "interactive mode on ares:",
    "text": "interactive mode on ares:\n\nusing GPU: srun -p plgrid-gpu-v100 --nodes=1 --ntasks=1 --mem=5GB --time=0-1 --pty bash\nusing CPU: srun -p plgrid --nodes=1 --ntasks=1 --mem=5GB --time=0-1 --pty bash"
  },
  {
    "objectID": "posts/openMM/mpipi_model.html",
    "href": "posts/openMM/mpipi_model.html",
    "title": "Implementation of Mpipi model in OpenMM",
    "section": "",
    "text": "Mpipi model is a coarse-grain model for simulating IDP. The original code is implemented in LAMMPS but I am not familiar with LAMMPS either.\nThe original paper:  Physics-driven coarse-grained model for biomolecular phase separation with near-quantitative accuracy.\nNature Computational Science volume 1, pages732â€“743 (2021). PDF file can be accessed from here\nThis model is different from other hps-based model is instead of using LJ12-6 potential, it used Wang-Frenkel potential.\n\\(\\phi_{i,j}(r) = \\epsilon_{i,j} \\alpha_{ij} \\left[\\left(\\frac{\\sigma_{ij}}{r}\\right)^{2\\mu_{ij}}-1 \\right] \\left[ \\left(\\frac{R_{ij}}{r}\\right)^{2\\mu_{ij}}-1\\right]^{2\\nu_{ij}}\\)\nwhere,\n\\(\\alpha_{ij}= 2\\nu_{ij} \\times \\left(\\frac{R_{ij}}{\\sigma_{ij}}\\right)^{2\\mu_{ij}} \\times \\left[ \\frac{(2\\nu_{ij}+1)}{2\\nu_{ij} \\left( \\left(\\frac{R_{ij}}{\\sigma_{ij}}\\right)^{2\\mu_{ij}}-1 \\right) })\\right]^{2\\nu_{ij}+1}\\)\nThey used: \\(\\nu_{ij}=1\\) and \\(R_{ij}=3\\sigma_{ij}\\)\n\\(\\sigma_{ij}, \\epsilon_{ij}, \\mu_{ij}\\) are parameters specified for each pair of interacting beads.\n\nImplementation\nTo implement this functional form. We used TabulatedFunction in OpenMM.\nFirst, we need to define the atom type of each residue, this definition is implemented in hps/parameters/model_parameters.py file as a dictionary, or github: here\n\nFunction is defined in hps/core/system.py. Here is the copied function:\n    def add_Wang_Frenkel_Forces(self, use_pbc: bool):\n        \"\"\"\n        MPIPI model. using TabulatedFunction for pair interaction.\n        More information about TabulatedFUnction can be found here:\n        http://docs.openmm.org/7.2.0/api-c++/generated/OpenMM.Discrete2DFunction.html\n        \"\"\"\n        wang_frenkel_cutoff = 2.5 * unit.nanometer\n\n        \"\"\"\n        In the model module, we only call this function when the model is mpipi so the following condition likely to be\n        true. But to be sure, we still check here.\n        \"\"\"\n        assert self.model in ['mpipi'], \"Wang-Frenkel is only used in Mpipi model.\"\n\n        table_eps = model_parameters.parameters[self.model]['eps_ij']\n        table_eps_ravel = table_eps.ravel().tolist()\n\n        table_sigma = model_parameters.parameters[self.model]['sigma_ij']\n        table_sigma_ravel = table_sigma.ravel().tolist()\n\n        table_nu = model_parameters.parameters[self.model]['nu_ij']\n        table_nu_ravel = table_nu.ravel().tolist()\n\n        table_mu = model_parameters.parameters[self.model]['mu_ij']\n        table_mu_ravel = table_mu.ravel().tolist()\n\n        table_rc = model_parameters.parameters[self.model]['rc_ij']\n        table_rc_ravel = table_rc.ravel().tolist()\n\n        # number of atom types in model. currently with protein, there are 20.\n        n_atom_types = table_sigma.shape[0]\n\n        # eps, sigma, nu, mu, rc: load from tabular table\n        \"\"\"\n        Note: here we use abs function in ((rc/r)^(2*mu)-1)^(2*nu) because otherwise, nu added by parameters is float.\n        when r>rc, produces this is negative and non-integer power of float is nan.\n        \"\"\"\n        energy_function = 'eps * 2*nu*(rc/sigma)^(2*mu) * ((2*nu+1)/(2*nu*((rc/sigma)^(2*mu)-1)))^(2*nu+1)'\n        energy_function += '* ((sigma/r)^(2*mu)-1 )* abs((rc/r)^(2*mu)-1)^(2*nu);'\n        energy_function += 'eps = eps_table(id1, id2); sigma = sigma_table(id1, id2);'\n        energy_function += 'nu = nu_table(id1, id2);'\n        energy_function += 'mu = mu_table(id1, id2);'\n        energy_function += 'rc=rc_table(id1, id2)'\n\n        self.wang_Frenkel_Force = mm.CustomNonbondedForce(energy_function)\n        self.wang_Frenkel_Force.addTabulatedFunction('eps_table', mm.Discrete2DFunction(n_atom_types, n_atom_types,\n                                                                                        table_eps_ravel))\n        self.wang_Frenkel_Force.addTabulatedFunction('sigma_table',\n                                                     mm.Discrete2DFunction(n_atom_types, n_atom_types,\n                                                                           table_sigma_ravel))\n        self.wang_Frenkel_Force.addTabulatedFunction('nu_table', mm.Discrete2DFunction(n_atom_types, n_atom_types,\n                                                                                       table_nu_ravel))\n        self.wang_Frenkel_Force.addTabulatedFunction('mu_table', mm.Discrete2DFunction(n_atom_types, n_atom_types,\n                                                                                       table_mu_ravel))\n        self.wang_Frenkel_Force.addTabulatedFunction('rc_table', mm.Discrete2DFunction(n_atom_types, n_atom_types,\n                                                                                       table_rc_ravel))\n        self.wang_Frenkel_Force.addPerParticleParameter('id')\n\n        for i, atom in enumerate(self.atoms):\n            self.wang_Frenkel_Force.addParticle((self.particle_type_id[i],))\n\n        if use_pbc:\n            self.wang_Frenkel_Force.setNonbondedMethod(mm.NonbondedForce.CutoffPeriodic)\n        else:\n            self.wang_Frenkel_Force.setNonbondedMethod(mm.NonbondedForce.CutoffNonPeriodic)\n\n        self.wang_Frenkel_Force.setCutoffDistance(wang_frenkel_cutoff)\n\n        # set exclusion rule\n        bonded_exclusions = [(b[0].index, b[1].index) for b in list(self.topology.bonds())]\n        self.wang_Frenkel_Force.createExclusionsFromBonds(bonded_exclusions, self.bonded_exclusions_index)\n\nline 15-28: read the numpy array define \\(\\epsilon_{ij}\\), \\(\\nu_{ij}\\), \\(\\mu_{ij}\\), and \\(R_{ij}\\)\nline 38-43: define the energy function to pass into CustomNonbondedForce\nline 46-55: let openMM knows where to get eps_table and other tabulated variables\nthe only Per-Particle-Parameter is the id of the particle, this is id of the residue type which is defined in model_parameters.py\nOther lines are self-explained.\n\nThe above code used global cutoff for Wang-Frenkel potential is 2.5nm. As stated in the paper, authors used the cutoff for each pair interaction is \\(3\\sigma\\). To do so, we can add the stepsize function before the energy function. Step function in openMM work as: step(x)=0 if x< 0 and 1 if x>=0.\nWe can add: step(rc-r)*eps... to the energy function. So, if \\(r \\gt rc \\Rightarrow rc-r \\lt 0 \\Rightarrow step(rc-r) =0\\)\n\n\nTabulatedFunction:\nThis is an interesting point from computational perpective.\nMore information about TabulatedFunction can be found in OpenMM documentation here\nHere, I will use 2D Discrete function.\nThe function works as follow: Discrete2DFunction(xsize, ysize, val)\nthe tabulated values of the function f(x,y), ordered so that values[i+xsize*j] = f(i,j). This must be of length xsize*ysize.\nThis is the reason why I use ravel() function from python to covnert 2D array to 1D array above.\nIn this code, I call:\n\\(\\epsilon_{ij}\\) = eps,\n\\(\\nu_{ij}\\) = nu,\n\\(\\mu_{ij}\\) = mu,\n\\(R_{ij}\\) = rc\nEach particle has Per-Particle-Parameter: id\nHere, we define, i.e: eps is a tabulated function: eps = eps_table(id1, id2). The value will be extracted from particle id\nIn my computer, the last part of the energy function: ((rc/r)^(2*mu)-1)^(2*nu) will be nan when r>rc. This is very strange since nu is loaded as float but 2*nu will always be an even number. My computer doesnâ€™t know that by some rounding rules of floating point. when r>rc: rc/r<1, rc/r-1<0, and non-integer number power of negative value is NaN.\nThatâ€™s why I used the abs function before this part as the power is even so they are equivalent."
  },
  {
    "objectID": "posts/python/Beautiful-plot-with-Matplotlib.html",
    "href": "posts/python/Beautiful-plot-with-Matplotlib.html",
    "title": "Make a beautiful plot using Matplotlib",
    "section": "",
    "text": "When writing a paper, a beautiful figure is very important. Before, I used Gnuplot or XMGRACE to make figures because it is easy to config.\nRecently I moved to Matplotlib and used it in many of my projects, found it convenient to make plots and tweak them to produce beautiful figures.\nHere are some snippet for reference to easily look back."
  },
  {
    "objectID": "posts/python/Beautiful-plot-with-Matplotlib.html#import-library",
    "href": "posts/python/Beautiful-plot-with-Matplotlib.html#import-library",
    "title": "Make a beautiful plot using Matplotlib",
    "section": "Import library",
    "text": "Import library\n\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport matplotlib\n%matplotlib notebook\n\nConfig for matplotlib\n\n# config for matplotlib\nfont = {'family' : 'arial',\n        'weight' : 'normal',\n        'size'   : 12}\n\nmatplotlib.rc('font', **font)\nmatplotlib.rcParams['axes.spines.right'] = False\nmatplotlib.rcParams['axes.spines.top'] = False\nmatplotlib.rcParams['axes.linewidth'] = 2 #set the value globally\n\n# set tick width\nmatplotlib.rcParams['xtick.major.size'] = 6\nmatplotlib.rcParams['xtick.major.width'] = 2\nmatplotlib.rcParams['ytick.major.size'] = 6\nmatplotlib.rcParams['ytick.major.width'] = 2\n\n\n# Create a fake data:\nx = np.arange(0, 2*np.pi, 2*np.pi/1000)\ny = np.sin(x)\ny2 = np.cos(x)\n\n\nfig = plt.figure(figsize=(8,5))\nplt.plot(x,y, color='black', lw=2, label='sin(x)', alpha=0.8)\nplt.plot(x,y2, color='red', lw=2, label='cos(x)', alpha=0.8)\n\n# Plot horizontal\nplt.axhline(y = 0.0, color = 'blue', linestyle = '--', alpha=0.5)\n\n# Config Legends and labels\n# set yticks\nplt.yticks([-1, 0, 1], ['first', 'second', ''])\n\nplt.legend(loc='upper center', ncol=2)\nplt.xlim(0, 2*np.pi)\nplt.ylim(-1,1)\nplt.ylabel(r'$f_x$') #latex type\nplt.xlabel('x')\n\n# To save figure with high DPI, uncomment following line: the more dpi, the clearer figure but large file\n# plt.savefig('Demo_matplotlib.png', dpi=1200)\n\n\n\n\n\n\n\nText(0.5, 0, 'x')"
  },
  {
    "objectID": "posts/python/Problems-regarding-ipywidgets.html",
    "href": "posts/python/Problems-regarding-ipywidgets.html",
    "title": "Problems regarding ipywidgets has no attribute â€˜version_infoâ€™",
    "section": "",
    "text": "With the recent update of ipywidgets, Pyemma, MDAnalysis and some other package encounter problems with ipywidgets.\nThe dirty solution is install version ipywidgets<8. version 7.7 may help and wait till developers of ipywidgets fix it."
  },
  {
    "objectID": "tools.html",
    "href": "tools.html",
    "title": "Tools",
    "section": "",
    "text": "hpsOpenMM\nOpenMM codebase for IDP which uses HPS-Urry/HPS-KR force field\nhps: hydropathy scale. Currently, there are three models are supported:\n\nhps_urry: Hydropathy according to Urry scale (default, Recommended).\nhps_kr: Kapcha-Rossy scale. This model has parameters for nucleic acids and post-translational modification residues.\nhps_ss: hps_urry with bonded potential.\nother models can be easily implemented by defining them in hps/parameters/model_parameters.py\n\nThe package is ready for studying various problems such as, conformation dynamics of single chain, LLPS â€¦\n(Source code is available on Github)\nCheck out docs for more details here\n\n\nentanglement Analysis\nThere are two main version of entanglement analysis:\n\nThe first one is characterized by the linking number of loops and the open terminal, which is composed of the whole terminal. Please check this paper for more details. This kind of entanglement can be calculated by the following code which is developed by Ian Sitarik (Penn State). Python version\nThe maximum linking number between the loop and all possible segments of the terminal is calculated by the following code: Julia version. There are two versions for this kind of entanglement calculation, in python and Julia. julia is much faster than Python."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "Quyen Vu\nPhD student at IFPAN, Poland.\nI am nowhere and I am everywhere.\n\nFavourite quote:\nWe all fear what we do not understand.\nâ€• Dan Brown, The Lost Symbol\n\n\n\nBrief CV:\n\n\n\n\n\n\n\n\n\nTime\nDegree\nWhere\nSupervisors\n\n\n\n\n2011-2015\nBsc in Physics\nVNU-US (Talented Program of Physics)\nToan T. Nguyen\n\n\n2015-2017\nMsc in Physics\nVNU-US\nToan T. Nguyen\n\n\n2018-2023\nPhD\nInstitute of Physics, Polish Academy of Sciences\nEdward P. Oâ€™Brien, Mai Suan Li"
  },
  {
    "objectID": "pubs.html",
    "href": "pubs.html",
    "title": "Publications",
    "section": "",
    "text": "Quyen V. Vu, Ian Sitarik, Yang Jiang, Divya Yadav, Piyoosh Sharma, Stephen D. Fried, Mai Suan Li, Edward P. Oâ€™Brien. A Newly Identified Class of Protein Misfolding in All-atom Folding Simulations Consistent with Limited Proteolysis Mass Spectrometry. (In Review) PrePrint available\nSarah E. Leininger, Judith Rodriguez, Quyen V. Vu, Yang Jiang, Mai Suan Li, Carol Deutsch, and Edward P. Oâ€™Brien. Ribosome Elongation Kinetics of Consecutively Charged Residues Are Coupled to Electrostatic Force. Biochemistry 2021, 60, 43, 3223â€“3235. Read more\nQuyen V. Vu, Yang Jiang, Mai Suan Li, Edward Oâ€™Brien. The Driving Force for Co-translational Protein Folding is Weaker In the Ribosome Vestibule due to Greater Water Ordering. Chemical Science 2021. 12, 11851-11857. Read more\nDaniel A. Nissley, Quyen V. Vu, Fabio Trovato, Nabeel Ahmed, Yang Jiang, Mai Suan Li, and Edward P. Oâ€™Brien. Electrostatic Interactions Govern Extreme Nascent Protein Ejection Times from Ribosomes and Can Delay Ribosome Recycling. J. Am. Chem. Soc. 142, 13, 6103-6110 (2020). Read more"
  },
  {
    "objectID": "about.html#brief-cv",
    "href": "about.html#brief-cv",
    "title": "About",
    "section": "### Brief CV:",
    "text": "### Brief CV:\n\n\n\n\n\n\n\n\n\nTime\nWHAT\nWhere\nSupervisors\n\n\n\n\n2011-2015\nBsc in Physics\nVietnam National University-University of Science (VNU-US) Talented Program of Physics\nToan T. Nguyen\n\n\n2015-2017\nMsc in Physics\nVNU-US\nToan T. Nguyen\n\n\n2018-2023\nPhD\nInstitute of Physics, Polish Academy of Sciences\nEdward P. Oâ€™Brien, Mai Suan Li"
  },
  {
    "objectID": "posts/openMM/hpsOpenMM_tutorial.html",
    "href": "posts/openMM/hpsOpenMM_tutorial.html",
    "title": "hpsOpenMM tutorial",
    "section": "",
    "text": "This tutorial guide you how to use hpsOpenMM to perform coarse-grained simulations of IDPs\n\nGenerate initial structure:\nTo generate initial structure, we can use a provided script: scripts/generate_structure_from_fasta/generate_structure.py\nIn this script, there are some parameters need to be changed:\nseq = 'MRTQWPSPAKLNLFLYITGQRADGYHTLQTLFQFLDYGDTISIELRDDGDIRLLTPVEGVEHEDNLIVRAARLLMKTAADSGRLPTGSGANISIDKRLPMGGGLGGGSSNAATVLVALNHLWQCGLSMDELAEMGLTLGADVPVFVRGHAAFAEGVGEILTPVDPPEKWYLVAHPGVSIPTPVIFKDPELPRNTPKRSIETLLKCEFSNDCEVIARKRFREVDAVLSWLLEYAPSRLTGTGACVFAEFDTESEARQVLEQAPEWLNGFVAKGANLSPLHRAML'\nprotein_name = \"2ww4\"\n# number of chains = nx*ny\nnx = 2\nny = 2\n\nline 1: the fasta sequence of protein we are studying\nline 2: name of protein, will be used to write pdb output file name\nlines 3-4: number of copies in x-y dimension, in case simulation of multichains\n\n\n\nSimulation control file:\nSimulation control parameters are saved in *ini file format (python file format): here, I will named it as md.ini\n[OPTIONS]\nmd_steps = 10_000 # number of steps\ndt = 0.01 ; time step in ps\nnstxout = 100 ; number of steps to write checkpoint = nstxout\nnstlog = 100 ; number of steps to print log\nnstcomm = 100 ; frequency for center of mass motion removal\n; select HPS model, available options: hps_kr, hps_urry, or hps_ss\nmodel = mpipi\n\n; control temperature coupling\ntcoupl = yes\nref_t = 310 ; Kelvin- reference temperature\ntau_t = 0.01 ; ps^-1\n\n;pressure coupling\npcoupl = no\nref_p = 1\nfrequency_p = 25\n\n; Periodic boundary condition: if pcoupl is yes then pbc must be yes.\npbc = yes\n; if pbc=yes, then use box_dimension option to specify box_dimension = x or [x, y, z], unit of nanometer\nbox_dimension = 30 ; [30, 30, 60]\n\n; input\nprotein_code = ASYN\npdb_file = asyn.pdb\n; output\ncheckpoint = asyn.chk\n;Use GPU/CPU\ndevice = GPU\n; If CPU is specified, then use ppn variable\nppn = 4\n;Restart simulation\nrestart = no\nminimize = yes ;if not restart, then minimize will be loaded, otherwise, minimize=False\nThis control file is almost self-explaination if you are familiar with other MD simulation packages.\n\n\nRunning simulation\nTo run simulation, there are two options:\n\nNormal canonical simulation using Langevin dynamics: hps-simulation -f md.ini\nIf you want to customize your simulation to use some advanced methods, make a copy of examples/standard_example/run_simulation.py Customize the content of this script then execute the command: python run_simulation -f md.ini\n\n\n\nAnalyze simulation trajectory\nSimulation will generate a psf file for topology and dcd file for trajectory, in addition, a log file that contains potential energy, kinetics energy, total energy and time remain to run simulations. But mainly you will need to analyze the trajectory to extract the information you need.\nIn the scripts/ directory, I provided some scripts I used in my study but you may need to develop for yours."
  },
  {
    "objectID": "pages/teams.html",
    "href": "pages/teams.html",
    "title": "Team",
    "section": "",
    "text": "Quyen Vu\nPhD student at IFPAN, Poland.\nI am nowhere and I am everywhere.\n\nFavourite quote:\nWe all fear what we do not understand.\nâ€• Dan Brown, The Lost Symbol\n\n\n\nBrief CV:\n\n\n\n\n\n\n\n\n\nTime\nWHAT\nWhere\nSupervisors\n\n\n\n\n2011-2015\nBsc in Physics\nVietnam National University-University of Science (VNU-US) Talented Program of Physics\nToan T. Nguyen\n\n\n2015-2017\nMsc in Physics\nVNU-US\nToan T. Nguyen\n\n\n2018-2023\nPhD\nInstitute of Physics, Polish Academy of Sciences\nEdward P. Oâ€™Brien, Mai Suan Li"
  },
  {
    "objectID": "pages/team.html",
    "href": "pages/team.html",
    "title": "Team",
    "section": "",
    "text": "Descriptions\nID\n\n\n\n\n\n\nwho engage with reality are often characterized as being warm, amicable, and considerate. Although they may exhibit a tendency towards shyness, they radiate kindness and friendliness.\nM-0\n\n\n\n\nA challenging individual, he possesses a toxic demeanor, however, he proves to be effective in resolving complex issues. Although he may take charge without notice, the protagonist is unaware of his actions.\nM-2015"
  }
]