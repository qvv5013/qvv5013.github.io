[
  {
    "objectID": "pubs.html",
    "href": "pubs.html",
    "title": "Publications",
    "section": "",
    "text": "Quyen V. Vu, Ian Sitarik, Yang Jiang, Divya Yadav, Piyoosh Sharma, Stephen D. Fried, Mai Suan Li, Edward P. O’Brien. A Newly Identified Class of Protein Misfolding in All-atom Folding Simulations Consistent with Limited Proteolysis Mass Spectrometry. (In Review) PrePrint available\nSarah E. Leininger, Judith Rodriguez, Quyen V. Vu, Yang Jiang, Mai Suan Li, Carol Deutsch, and Edward P. O’Brien. Ribosome Elongation Kinetics of Consecutively Charged Residues Are Coupled to Electrostatic Force. Biochemistry 2021, 60, 43, 3223–3235. Read more\nQuyen V. Vu, Yang Jiang, Mai Suan Li, Edward O’Brien. The Driving Force for Co-translational Protein Folding is Weaker In the Ribosome Vestibule due to Greater Water Ordering. Chemical Science 2021. 12, 11851-11857. Read more\nDaniel A. Nissley, Quyen V. Vu, Fabio Trovato, Nabeel Ahmed, Yang Jiang, Mai Suan Li, and Edward P. O’Brien. Electrostatic Interactions Govern Extreme Nascent Protein Ejection Times from Ribosomes and Can Delay Ribosome Recycling. J. Am. Chem. Soc. 142, 13, 6103-6110 (2020). Read more"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "Quyen Vu\nPhD student at IFPAN, Poland.\nI am nowhere and I am everywhere. If you know me, you know how to reach me.\n\nFavourite quote:\nWe all fear what we do not understand.\n― Dan Brown, The Lost Symbol"
  },
  {
    "objectID": "posts/openMM/mpipi_model.html",
    "href": "posts/openMM/mpipi_model.html",
    "title": "Implementation of Mpipi model in OpenMM",
    "section": "",
    "text": "Mpipi model is a coarse-grain model for simulating IDP. The original code is implemented in LAMMPS but I do not have access to the source code and am not familiar with LAMMPS either.\nThe original paper:  Physics-driven coarse-grained model for biomolecular phase separation with near-quantitative accuracy  Nature Computational Science volume 1, pages732–743 (2021)\nPDF file can be accessed from here\nThis model is different from other hps-based model is instead of using LJ12-6 potential, it used Wang-Frenkel potential.\n\\(\\phi_{i,j}(r) = \\epsilon_{i,j} \\alpha_{ij} \\left[\\left(\\frac{\\sigma_{ij}}{r}\\right)^{2\\mu_{ij}}-1 \\right] \\left[ \\left(\\frac{R_{ij}}{r}\\right)^{2\\mu_{ij}}-1\\right]^{2\\nu_{ij}}\\)\nwhere,\n\\(\\alpha_{ij}= 2\\nu_{ij} \\times \\left(\\frac{R_{ij}}{\\sigma_{ij}}\\right)^{2\\mu_{ij}} \\times \\left[ \\frac{(2\\nu_{ij}+1)}{2\\nu_{ij} \\left( \\left(\\frac{R_{ij}}{\\sigma_{ij}}\\right)^{2\\mu_{ij}}-1 \\right) })\\right]^{2\\nu_{ij}+1}\\)\nThey used: \\(\\nu_{ij}=1\\) and \\(R_{ij}=3\\sigma_{ij}\\)\n\\(\\sigma_{ij}, \\epsilon_{ij}, \\mu_{ij}\\) are parameters specified for each pait of interacting beads.\n\nImplementation\nThis post is for purpose of code-snippets which I implemented but it still not working. I will try to improve the post when I have time to make it clear.\nTo implement this functional form. We used TabulatedFunction in OpenMM.\nFirst, we need to define atom type of each residue, this definition is implemented in hps/parameters/model_parameters.py file as a dictionary:\nparameters = {\n        \n    \"mpipi\": {\n        \"bond_length\": 0.381,\n        \"bonded_exclusions_index\": 1,\n        \"MET\": {\n            \"mass\": 131.20,\n            \"charge\": 0.0,\n            \"id\": 0\n        },\n        \"GLY\": {\n            \"mass\": 57.05,\n            \"charge\": 0.0,\n            \"id\": 1\n        },\n        \"LYS\": {\n            \"mass\": 128.20,\n            \"charge\": 0.75,\n            \"id\": 2\n        },\n        \"THR\": {\n            \"mass\": 101.10,\n            \"charge\": 0.0,\n            \"id\": 3\n        },\n        \"ARG\": {\n            \"mass\": 156.20,\n            \"charge\": 0.75,\n            \"id\": 4\n        },\n        \"ALA\": {\n            \"mass\": 71.08,\n            \"charge\": 0.0,\n            \"id\": 5\n        },\n        \"ASP\": {\n            \"mass\": 115.10,\n            \"charge\": -0.75,\n            \"id\": 6\n        },\n        \"GLU\": {\n            \"mass\": 129.10,\n            \"charge\": -0.75,\n            \"id\": 7\n        },\n        \"TYR\": {\n            \"mass\": 163.20,\n            \"charge\": 0.0,\n            \"id\": 8\n        },\n        \"VAL\": {\n            \"mass\": 99.07,\n            \"charge\": 0.0,\n            \"id\": 9\n        },\n        \"LEU\": {\n            \"mass\": 113.20,\n            \"charge\": 0.0,\n            \"id\": 10\n        },\n        \"GLN\": {\n            \"mass\": 128.10,\n            \"charge\": 0.0,\n            \"id\": 11\n        },\n        \"TRP\": {\n            \"mass\": 186.20,\n            \"charge\": 0.0,\n            \"id\": 12\n        },\n        \"PHE\": {\n            \"mass\": 147.20,\n            \"charge\": 0.0,\n            \"id\": 13\n        },\n        \"SER\": {\n            \"mass\": 87.08,\n            \"charge\": 0.0,\n            \"id\": 14\n        },\n        \"HIS\": {\n            \"mass\": 137.10,\n            \"charge\": 0.375,\n            \"id\": 15\n        },\n        \"ASN\": {\n            \"mass\": 114.10,\n            \"charge\": 0.0,\n            \"id\": 16\n        },\n        \"PRO\": {\n            \"mass\": 97.12,\n            \"charge\": 0.0,\n            \"id\": 17\n        },\n        \"CYS\": {\n            \"mass\": 103.10,\n            \"charge\": 0.0,\n            \"id\": 18\n        },\n        \"ILE\": {\n            \"mass\": 113.20,\n            \"charge\": 0.0,\n            \"id\": 19\n        }\n\n    }\n}\n\n \\(\\epsilon_{ij}\\) pair parameters:\ntable_eps = np.array([[0.165536, 0.284583, 0.136758, 0.147114, 0.717619,\n                               0.186280, 0.306152, 0.324582, 0.959705, 0.094437,\n                               0.105776, 0.502105, 1.233991, 0.902083, 0.211635,\n                               0.851406, 0.488298, 0.247358, 0.227764, 0.083592],\n                              [0.284583, 0.403630, 0.255806, 0.266161, 0.836666,\n                               0.305327, 0.425199, 0.443630, 1.078752, 0.213484,\n                               0.224823, 0.621152, 1.353039, 1.021130, 0.330682,\n                               0.970454, 0.607345, 0.366405, 0.346812, 0.202639],\n                              [0.136758, 0.255806, 0.079986, 0.118336, 0.510189,\n                               0.157502, 0.002063, 0.002201, 0.429701, 0.065660,\n                               0.076998, 0.473328, 0.438466, 0.482315, 0.182858,\n                               0.365556, 0.459520, 0.218581, 0.198987, 0.054815],\n                              [0.147114, 0.266161, 0.118336, 0.128691, 0.699197,\n                               0.167858, 0.287729, 0.306160, 0.941283, 0.076015,\n                               0.087354, 0.483683, 1.215565, 0.883661, 0.193213,\n                               0.832984, 0.469876, 0.228936, 0.209342, 0.065170],\n                              [0.717619, 0.836666, 0.510189, 0.699197, 0.376209,\n                               0.738363, 0.006368, 0.006502, 2.543119, 0.646520,\n                               0.657859, 1.054188, 2.893893, 2.280037, 0.763718,\n                               0.519808, 1.040381, 0.799441, 0.779847, 0.635675],\n                              [0.186280, 0.305327, 0.157502, 0.167858, 0.738363,\n                               0.207024, 0.326896, 0.345326, 0.980449, 0.115181,\n                               0.126520, 0.522849, 1.254736, 0.922827, 0.232379,\n                               0.872151, 0.509046, 0.268102, 0.248509, 0.104336],\n                              [0.306152, 0.425199, 0.002063, 0.287729, 0.006368,\n                               0.326896, 0.330938, 0.344590, 1.100321, 0.235049,\n                               0.246387, 0.642721, 1.374603, 1.042699, 0.352247,\n                               0.007355, 0.628914, 0.387974, 0.368380, 0.224208],\n                              [0.324582, 0.443630, 0.002201, 0.306160, 0.006502,\n                               0.345326, 0.344590, 0.358242, 1.118751, 0.253479,\n                               0.264818, 0.661151, 1.393034, 1.061129, 0.370677,\n                               0.007494, 0.647344, 0.406404, 0.386811, 0.242639],\n                              [0.959705, 1.078752, 0.429701, 0.941283, 2.543119,\n                               0.980449, 1.100321, 1.118751, 1.753874, 0.888606,\n                               0.899945, 1.296274, 2.028156, 1.696252, 1.005804,\n                               1.645576, 1.282467, 1.041527, 1.021934, 0.877761],\n                              [0.094437, 0.213484, 0.065660, 0.076015, 0.646520,\n                               0.115181, 0.235049, 0.253479, 0.888606, 0.023338,\n                               0.034677, 0.431006, 1.162888, 0.830984, 0.140536,\n                               0.780308, 0.417199, 0.176259, 0.156666, 0.012493],\n                              [0.105776, 0.224823, 0.076998, 0.087354, 0.657859,\n                               0.126520, 0.246387, 0.264818, 0.899945, 0.034677,\n                               0.046016, 0.442345, 1.174227, 0.842323, 0.151875,\n                               0.791646, 0.428538, 0.187598, 0.168004, 0.023832],\n                              [0.502105, 0.621152, 0.473328, 0.483683, 1.054188,\n                               0.522849, 0.642721, 0.661151, 1.296274, 0.431006,\n                               0.442345, 0.838674, 1.570556, 1.238652, 0.548204,\n                               1.187976, 0.824867, 0.583927, 0.564334, 0.420161],\n                              [1.233991, 1.353039, 0.438466, 1.215565, 2.893893,\n                               1.254736, 1.374603, 1.393034, 2.028156, 1.162888,\n                               1.174227, 1.570556, 2.302443, 1.970538, 1.280086,\n                               1.919858, 1.556753, 1.315814, 1.296220, 1.152048],\n                              [0.902083, 1.021130, 0.482315, 0.883661, 2.280037,\n                               0.922827, 1.042699, 1.061129, 1.696252, 0.830984,\n                               0.842323, 1.238652, 1.970538, 1.638630, 0.948182,\n                               1.587954, 1.224845, 0.983905, 0.964312, 0.820139],\n                              [0.211635, 0.330682, 0.182858, 0.193213, 0.763718,\n                               0.232379, 0.352247, 0.370677, 1.005804, 0.140536,\n                               0.151875, 0.548204, 1.280086, 0.948182, 0.257734,\n                               0.897506, 0.534397, 0.293457, 0.273864, 0.129691],\n                              [0.851406, 0.970454, 0.365556, 0.832984, 0.519808,\n                               0.872151, 0.007355, 0.007494, 1.645576, 0.780308,\n                               0.791646, 1.187976, 1.919858, 1.587954, 0.897506,\n                               0.113872, 1.174168, 0.933229, 0.913635, 0.769463],\n                              [0.488298, 0.607345, 0.459520, 0.469876, 1.040381,\n                               0.509046, 0.628914, 0.647344, 1.282467, 0.417199,\n                               0.428538, 0.824867, 1.556753, 1.224845, 0.534397,\n                               1.174168, 0.811064, 0.570124, 0.550531, 0.406358],\n                              [0.247358, 0.366405, 0.218581, 0.228936, 0.799441,\n                               0.268102, 0.387974, 0.406404, 1.041527, 0.176259,\n                               0.187598, 0.583927, 1.315814, 0.983905, 0.293457,\n                               0.933229, 0.570124, 0.329185, 0.309591, 0.165419],\n                              [0.227764, 0.346812, 0.198987, 0.209342, 0.779847,\n                               0.248509, 0.368380, 0.386811, 1.021934, 0.156666,\n                               0.168004, 0.564334, 1.296220, 0.964312, 0.273864,\n                               0.913635, 0.550531, 0.309591, 0.289997, 0.145825],\n                              [0.083592, 0.202639, 0.054815, 0.065170, 0.635675,\n                               0.104336, 0.224208, 0.242639, 0.877761, 0.012493,\n                               0.023832, 0.420161, 1.152048, 0.820139, 0.129691,\n                               0.769463, 0.406358, 0.165419, 0.145825, 0.001653]])\n        table_eps_ravel = table_eps.ravel().tolist()\nThis table has a shape of (20,20)- 20 rows and 20 columns. The order of rows and columns follows the id in the residue definition above.\nEach element of the matrix is the \\(\\epsilon_{ij}\\) parameter between residue type i and type j. For example, table_eps[0,0] is the interaction between residue type 0 and 0, which corresponds to the MET-MET interaction. Similarly, table_eps[19,0] is interaction between ILE-MET\n\nUsing the same method, we define \\(\\sigma\\) matrix:\ntable_sigma = np.array([[0.646795, 0.557618, 0.656778, 0.617823, 0.664396,\n                                 0.586850, 0.614146, 0.631818, 0.659004, 0.632057,\n                                 0.648344, 0.636519, 0.675573, 0.653821, 0.593894,\n                                 0.639251, 0.618802, 0.613446, 0.609429, 0.649639],\n                                [0.557618, 0.469511, 0.567134, 0.528442, 0.576639,\n                                 0.498013, 0.525925, 0.543637, 0.571317, 0.541239,\n                                 0.557893, 0.548630, 0.587924, 0.566122, 0.505252,\n                                 0.551541, 0.530902, 0.524999, 0.520872, 0.558033],\n                                [0.656778, 0.567134, 0.667134, 0.627940, 0.673819,\n                                 0.596669, 0.623699, 0.641358, 0.668408, 0.643354,\n                                 0.659256, 0.645969, 0.684969, 0.663228, 0.603618,\n                                 0.648660, 0.628255, 0.623106, 0.619115, 0.661800],\n                                [0.617823, 0.528442, 0.627940, 0.588906, 0.635202,\n                                 0.557795, 0.584987, 0.602654, 0.629806, 0.603697,\n                                 0.619809, 0.607329, 0.646378, 0.624625, 0.564801,\n                                 0.610053, 0.589610, 0.584320, 0.580321, 0.621462],\n                                [0.664396, 0.576639, 0.673819, 0.635202, 0.683905,\n                                 0.604909, 0.632986, 0.650709, 0.678624, 0.647780,\n                                 0.664461, 0.655828, 0.695255, 0.673424, 0.612191,\n                                 0.658837, 0.638103, 0.631985, 0.627828, 0.664491],\n                                [0.586850, 0.498013, 0.596669, 0.557795, 0.604909,\n                                 0.527007, 0.554510, 0.572198, 0.599537, 0.571467,\n                                 0.587918, 0.576988, 0.616122, 0.594352, 0.534119,\n                                 0.579777, 0.559268, 0.553738, 0.549687, 0.588726],\n                                [0.614146, 0.525925, 0.623699, 0.584987, 0.632986,\n                                 0.554510, 0.582352, 0.600058, 0.627647, 0.597874,\n                                 0.614509, 0.605004, 0.644244, 0.622456, 0.561730,\n                                 0.607876, 0.587280, 0.581455, 0.577340, 0.614699],\n                                [0.631818, 0.543637, 0.641358, 0.602654, 0.650709,\n                                 0.572198, 0.600058, 0.617767, 0.645370, 0.615504,\n                                 0.632146, 0.622721, 0.661969, 0.640180, 0.579422,\n                                 0.625600, 0.604999, 0.599152, 0.595036, 0.632333],\n                                [0.659004, 0.571317, 0.668408, 0.629806, 0.678624,\n                                 0.599537, 0.627647, 0.645370, 0.673363, 0.642355,\n                                 0.659039, 0.650525, 0.690005, 0.668159, 0.606828,\n                                 0.653569, 0.632798, 0.626630, 0.622465, 0.659055],\n                                [0.632057, 0.541239, 0.643354, 0.603697, 0.647780,\n                                 0.571467, 0.597874, 0.615504, 0.642355, 0.626600,\n                                 0.639093, 0.619973, 0.658912, 0.637178, 0.578166,\n                                 0.622610, 0.602261, 0.597433, 0.593567, 0.671801],\n                                [0.648344, 0.557893, 0.659256, 0.619809, 0.664461,\n                                 0.587918, 0.614509, 0.632146, 0.659039, 0.639093,\n                                 0.653407, 0.636649, 0.675594, 0.653860, 0.594697,\n                                 0.639294, 0.618936, 0.614021, 0.610125, 0.660772],\n                                [0.636519, 0.548630, 0.645969, 0.607329, 0.655828,\n                                 0.576988, 0.605004, 0.622721, 0.650525, 0.619973,\n                                 0.636649, 0.627785, 0.667141, 0.645328, 0.584255,\n                                 0.630743, 0.610059, 0.604035, 0.599885, 0.636715],\n                                [0.675573, 0.587924, 0.684969, 0.646378, 0.695255,\n                                 0.616122, 0.644244, 0.661969, 0.690005, 0.658912,\n                                 0.675594, 0.667141, 0.706655, 0.684798, 0.623414,\n                                 0.670209, 0.649416, 0.643217, 0.639053, 0.675603],\n                                [0.653821, 0.566122, 0.663228, 0.624625, 0.673424,\n                                 0.594352, 0.622456, 0.640180, 0.668159, 0.637178,\n                                 0.653860, 0.645328, 0.684798, 0.662955, 0.601640,\n                                 0.648367, 0.627603, 0.621441, 0.617279, 0.653879],\n                                [0.593894, 0.505252, 0.603618, 0.564801, 0.612191,\n                                 0.534119, 0.561730, 0.579422, 0.606828, 0.578166,\n                                 0.594697, 0.584255, 0.623414, 0.601640, 0.541267,\n                                 0.587063, 0.566533, 0.560932, 0.556848, 0.595253],\n                                [0.639251, 0.551541, 0.648660, 0.610053, 0.658837,\n                                 0.579777, 0.607876, 0.625600, 0.653569, 0.622610,\n                                 0.639294, 0.630743, 0.670209, 0.648367, 0.587063,\n                                 0.633778, 0.613018, 0.606865, 0.602702, 0.639315],\n                                [0.618802, 0.530902, 0.628255, 0.589610, 0.638103,\n                                 0.559268, 0.587280, 0.604999, 0.632798, 0.602261,\n                                 0.618936, 0.610059, 0.649416, 0.627603, 0.566533,\n                                 0.613018, 0.592335, 0.586308, 0.582164, 0.618999],\n                                [0.613446, 0.524999, 0.623106, 0.584320, 0.631985,\n                                 0.553738, 0.581455, 0.599152, 0.626630, 0.597433,\n                                 0.614021, 0.604035, 0.643217, 0.621441, 0.560932,\n                                 0.606865, 0.586308, 0.580616, 0.576515, 0.614386],\n                                [0.609429, 0.520872, 0.619115, 0.580321, 0.627828,\n                                 0.549687, 0.577340, 0.595036, 0.622465, 0.593567,\n                                 0.610125, 0.599885, 0.639053, 0.617279, 0.556848,\n                                 0.602702, 0.582164, 0.576515, 0.572436, 0.610587],\n                                [0.649639, 0.558033, 0.661800, 0.621462, 0.664491,\n                                 0.588726, 0.614699, 0.632333, 0.659055, 0.671801,\n                                 0.660772, 0.636715, 0.675603, 0.653879, 0.595253,\n                                 0.639315, 0.618999, 0.614386, 0.610587, 0.692168]])\n        table_sigma_ravel = table_sigma.ravel().tolist()\n \\(\\nu_{ij}\\) matrix:\nAs said above, \\(\\nu_{ij}\\) is one for all. But for generalize in case we want to modify, I till defined this matrix in the same fashion.\ntable_nu = np.array([[1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n                              1., 1., 1., 1.],\n                             [1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n                              1., 1., 1., 1.],\n                             [1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n                              1., 1., 1., 1.],\n                             [1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n                              1., 1., 1., 1.],\n                             [1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n                              1., 1., 1., 1.],\n                             [1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n                              1., 1., 1., 1.],\n                             [1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n                              1., 1., 1., 1.],\n                             [1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n                              1., 1., 1., 1.],\n                             [1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n                              1., 1., 1., 1.],\n                             [1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n                              1., 1., 1., 1.],\n                             [1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n                              1., 1., 1., 1.],\n                             [1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n                              1., 1., 1., 1.],\n                             [1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n                              1., 1., 1., 1.],\n                             [1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n                              1., 1., 1., 1.],\n                             [1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n                              1., 1., 1., 1.],\n                             [1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n                              1., 1., 1., 1.],\n                             [1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n                              1., 1., 1., 1.],\n                             [1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n                              1., 1., 1., 1.],\n                             [1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n                              1., 1., 1., 1.],\n                             [1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n                              1., 1., 1., 1.]])\n        table_nu_ravel = table_nu.ravel().tolist()\n\n \\(\\mu_{ij}\\) matrix:\ntable_mu = np.array([[2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2.,\n                             2., 2., 2., 2., 2., 2., 2.],\n                            [2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2.,\n                             2., 2., 2., 2., 2., 2., 2.],\n                            [2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2.,\n                             2., 2., 2., 2., 2., 2., 2.],\n                            [2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2.,\n                             2., 2., 2., 2., 2., 2., 2.],\n                            [2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2.,\n                             2., 2., 2., 2., 2., 2., 2.],\n                            [2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2.,\n                             2., 2., 2., 2., 2., 2., 2.],\n                            [2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2.,\n                             2., 2., 2., 2., 2., 2., 2.],\n                            [2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2.,\n                             2., 2., 2., 2., 2., 2., 2.],\n                            [2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2.,\n                             2., 2., 2., 2., 2., 2., 2.],\n                            [2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2.,\n                             2., 2., 2., 2., 2., 2., 4.],\n                            [2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2.,\n                             2., 2., 2., 2., 2., 2., 2.],\n                            [2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2.,\n                             2., 2., 2., 2., 2., 2., 2.],\n                            [2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2.,\n                             2., 2., 2., 2., 2., 2., 2.],\n                            [2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2.,\n                             2., 2., 2., 2., 2., 2., 2.],\n                            [2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2.,\n                             2., 2., 2., 2., 2., 2., 2.],\n                            [2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2.,\n                             2., 2., 2., 2., 2., 2., 2.],\n                            [2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2.,\n                             2., 2., 2., 2., 2., 2., 2.],\n                            [2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2.,\n                             2., 2., 2., 2., 2., 2., 2.],\n                            [2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2.,\n                             2., 2., 2., 2., 2., 2., 2.],\n                            [2., 2., 2., 2., 2., 2., 2., 2., 2., 4., 2., 2., 2.,\n                             2., 2., 2., 2., 2., 2., 11.]])\n        table_mu_ravel = table_mu.ravel().tolist()\n\n \\(R_{ij}\\) matrix:\nThis is simplely \\(3\\sigma_{ij}\\)\ntable_rc = np.array([[1.940385, 1.672854, 1.970335, 1.853468, 1.993189,\n                              1.760551, 1.842438, 1.895453, 1.977011, 1.896171,\n                              1.945033, 1.909556, 2.026719, 1.961463, 1.781682,\n                              1.917752, 1.856406, 1.840339, 1.828288, 1.948918],\n                             [1.672854, 1.408533, 1.701401, 1.585327, 1.729916,\n                              1.494040, 1.577776, 1.630912, 1.713950, 1.623718,\n                              1.673679, 1.645890, 1.763771, 1.698366, 1.515757,\n                              1.654623, 1.592705, 1.574997, 1.562617, 1.674099],\n                             [1.970335, 1.701401, 2.001402, 1.883820, 2.021458,\n                              1.790006, 1.871096, 1.924073, 2.005225, 1.930062,\n                              1.977767, 1.937908, 2.054906, 1.989684, 1.810854,\n                              1.945981, 1.884764, 1.869318, 1.857346, 1.985399],\n                             [1.853468, 1.585327, 1.883820, 1.766718, 1.905605,\n                              1.673384, 1.754960, 1.807962, 1.889419, 1.811090,\n                              1.859427, 1.821986, 1.939133, 1.873875, 1.694402,\n                              1.830159, 1.768830, 1.752959, 1.740963, 1.864385],\n                             [1.993189, 1.729916, 2.021458, 1.905605, 2.051715,\n                              1.814728, 1.898958, 1.952126, 2.035872, 1.943340,\n                              1.993382, 1.967484, 2.085765, 2.020273, 1.836572,\n                              1.976511, 1.914308, 1.895955, 1.883483, 1.993474],\n                             [1.760551, 1.494040, 1.790006, 1.673384, 1.814728,\n                              1.581022, 1.663531, 1.716595, 1.798612, 1.714402,\n                              1.763755, 1.730964, 1.848366, 1.783057, 1.602356,\n                              1.739330, 1.677803, 1.661215, 1.649060, 1.766179],\n                             [1.842438, 1.577776, 1.871096, 1.754960, 1.898958,\n                              1.663531, 1.747057, 1.800175, 1.882942, 1.793621,\n                              1.843527, 1.815012, 1.932732, 1.867367, 1.685190,\n                              1.823628, 1.761839, 1.744364, 1.732021, 1.844096],\n                             [1.895453, 1.630912, 1.924073, 1.807962, 1.952126,\n                              1.716595, 1.800175, 1.853301, 1.936109, 1.846512,\n                              1.896437, 1.868164, 1.985908, 1.920540, 1.738266,\n                              1.876800, 1.814997, 1.797457, 1.785109, 1.896998],\n                             [1.977011, 1.713950, 2.005225, 1.889419, 2.035872,\n                              1.798612, 1.882942, 1.936109, 2.020090, 1.927065,\n                              1.977116, 1.951575, 2.070015, 2.004477, 1.820484,\n                              1.960707, 1.898395, 1.879889, 1.867395, 1.977165],\n                             [1.896171, 1.623718, 1.930062, 1.811090, 1.943340,\n                              1.714402, 1.793621, 1.846512, 1.927065, 1.879800,\n                              1.917280, 1.859919, 1.976735, 1.911535, 1.734499,\n                              1.867831, 1.806782, 1.792299, 1.780701, 2.015403],\n                             [1.945033, 1.673679, 1.977767, 1.859427, 1.993382,\n                              1.763755, 1.843527, 1.896437, 1.977116, 1.917280,\n                              1.960222, 1.909947, 2.026781, 1.961581, 1.784091,\n                              1.917883, 1.856809, 1.842064, 1.830374, 1.982317],\n                             [1.909556, 1.645890, 1.937908, 1.821986, 1.967484,\n                              1.730964, 1.815012, 1.868164, 1.951575, 1.859919,\n                              1.909947, 1.883355, 2.001422, 1.935983, 1.752766,\n                              1.892230, 1.830178, 1.812104, 1.799656, 1.910146],\n                             [2.026719, 1.763771, 2.054906, 1.939133, 2.085765,\n                              1.848366, 1.932732, 1.985908, 2.070015, 1.976735,\n                              2.026781, 2.001422, 2.119964, 2.054395, 1.870242,\n                              2.010627, 1.948249, 1.929652, 1.917160, 2.026810],\n                             [1.961463, 1.698366, 1.989684, 1.873875, 2.020273,\n                              1.783057, 1.867367, 1.920540, 2.004477, 1.911535,\n                              1.961581, 1.935983, 2.054395, 1.988865, 1.804920,\n                              1.945102, 1.882808, 1.864322, 1.851836, 1.961636],\n                             [1.781682, 1.515757, 1.810854, 1.694402, 1.836572,\n                              1.602356, 1.685190, 1.738266, 1.820484, 1.734499,\n                              1.784091, 1.752766, 1.870242, 1.804920, 1.623801,\n                              1.761190, 1.699598, 1.682795, 1.670544, 1.785760],\n                             [1.917752, 1.654623, 1.945981, 1.830159, 1.976511,\n                              1.739330, 1.823628, 1.876800, 1.960707, 1.867831,\n                              1.917883, 1.892230, 2.010627, 1.945102, 1.761190,\n                              1.901335, 1.839054, 1.820595, 1.808106, 1.917944],\n                             [1.856406, 1.592705, 1.884764, 1.768830, 1.914308,\n                              1.677803, 1.761839, 1.814997, 1.898395, 1.806782,\n                              1.856809, 1.830178, 1.948249, 1.882808, 1.699598,\n                              1.839054, 1.777005, 1.758925, 1.746493, 1.856996],\n                             [1.840339, 1.574997, 1.869318, 1.752959, 1.895955,\n                              1.661215, 1.744364, 1.797457, 1.879889, 1.792299,\n                              1.842064, 1.812104, 1.929652, 1.864322, 1.682795,\n                              1.820595, 1.758925, 1.741847, 1.729545, 1.843158],\n                             [1.828288, 1.562617, 1.857346, 1.740963, 1.883483,\n                              1.649060, 1.732021, 1.785109, 1.867395, 1.780701,\n                              1.830374, 1.799656, 1.917160, 1.851836, 1.670544,\n                              1.808106, 1.746493, 1.729545, 1.717309, 1.831760],\n                             [1.948918, 1.674099, 1.985399, 1.864385, 1.993474,\n                              1.766179, 1.844096, 1.896998, 1.977165, 2.015403,\n                              1.982317, 1.910146, 2.026810, 1.961636, 1.785760,\n                              1.917944, 1.856996, 1.843158, 1.831760, 2.076504]])\n        table_rc_ravel = table_rc.ravel().tolist()\n\n\nTabulatedFunction:\nThis is an interesting point from computational perpective.\nMore information about TabulatedFunction can be found in OpenMM documentation here\nHere, I will use 2D Discrete function.\nThe function works as follow: Discrete2DFunction(xsize, ysize, val)\nthe tabulated values of the function f(x,y), ordered so that values[i+xsize*j] = f(i,j). This must be of length xsize*ysize.\nThis is the reason why I use ravel() function from python to covnert 2D array to 1D array above.\n\n\nThe main part of Wang-Frenkel Potential:\ndef add_Wang_Frenkel_Forces(self, use_pbc: bool) ):\n    # number of atom types in model. currently with protein, there are 20.\n    n_atom_types = table_sigma.shape[0]\n\n    # eps, sigma, nu, mu, rc: load from tabular table\n    energy_function = 'eps * 2*nu*(rc/sigma)^(2*mu) * ((2*nu+1)/(2*nu*((rc/sigma)^(2*mu)-1)) )^(2*nu+1)'\n    energy_function += '* ((sigma/r)^(2*mu)-1 ) * ((rc/r)^(2*mu)-1)^(2*nu);'\n    energy_function += 'eps = eps_table(id1, id2); sigma = sigma_table(id1, id2);'\n    energy_function += 'nu = nu_table(id1, id2); mu = mu_table(id1, id2);'\n    energy_function += 'rc=rc_table(id1, id2)'\n\n    self.wang_Frenkel_Force = openmm.CustomNonbondedForce(energy_function)\n    self.wang_Frenkel_Force.addTabulatedFunction('eps_table', openmm.Discrete2DFunction(n_atom_types, n_atom_types,\n                                                                                        table_eps_ravel))\n    self.wang_Frenkel_Force.addTabulatedFunction('sigma_table',\n                                                 openmm.Discrete2DFunction(n_atom_types, n_atom_types,\n                                                                           table_sigma_ravel))\n    self.wang_Frenkel_Force.addTabulatedFunction('nu_table', openmm.Discrete2DFunction(n_atom_types, n_atom_types,\n                                                                                       table_nu_ravel))\n    self.wang_Frenkel_Force.addTabulatedFunction('mu_table', openmm.Discrete2DFunction(n_atom_types, n_atom_types,\n                                                                                       table_mu_ravel))\n    self.wang_Frenkel_Force.addTabulatedFunction('rc_table', openmm.Discrete2DFunction(n_atom_types, n_atom_types,\n                                                                                       table_rc_ravel))\n    self.wang_Frenkel_Force.addPerParticleParameter('id')\n\n    for i, atom in enumerate(self.atoms):\n        self.wang_Frenkel_Force.addParticle((self.particle_type_id[i],))\n\n    if use_pbc:\n        self.wang_Frenkel_Force.setNonbondedMethod(openmm.NonbondedForce.CutoffPeriodic)\n    else:\n        self.wang_Frenkel_Force.setNonbondedMethod(openmm.NonbondedForce.CutoffNonPeriodic)\n\n    self.wang_Frenkel_Force.setCutoffDistance(wang_frenkel_cutoff)\n\n\n\n    # set exclusion rule\n    bonded_exclusions = [(b[0].index, b[1].index) for b in list(self.topology.bonds())]\n    self.wang_Frenkel_Force.createExclusionsFromBonds(bonded_exclusions, self.bonded_exclusions_index)\nIn this code, I call:\n\\(\\epsilon_{ij}\\) = eps,\n\\(\\nu_{ij}\\) = nu,\n\\(\\mu_{ij}\\) = mu,\n\\(R_{ij}\\) = rc\nEach particle has Per-Particle-Parameter: id\nHere, we define, i.e: eps is a tabulated function: eps = eps_table(id1, id2). The value will be extracted from particle id\n Currently, the implementation return NaN pair-wise energy. The problem may be due to the initial conformation of protein since I test with a system of 7 particles it can calculate correctly, but for larger systems, it’s hard to debug so just STOP there."
  },
  {
    "objectID": "posts/Running-jobs-on-clusters/running-jobs-on-cluster.html",
    "href": "posts/Running-jobs-on-clusters/running-jobs-on-cluster.html",
    "title": "Running jobs on clusters",
    "section": "",
    "text": "Ares supercomputer\n\nCPU job script\n#!/bin/bash\n#SBATCH --partition plgrid\n#SBATCH --job-name cryosparc-master\n#SBATCH --nodes 1\n#SBATCH --ntasks-per-node 1\n#SBATCH --mem 15GB\n#SBATCH --time 72:00:00\n#SBATCH -C localfs\n#SBATCH -A plgrisa-cpu\n#SBATCH --dependency=singleton\n#SBATCH --output cryosparc-master-log-%J.txt\n#SBATCH --signal=B:2@240\n\necho \"Job run\" > test.txt\n\n\nGPU Job script\n\n\n\nPrometheus supercomputer\n\nCPU job\n\n\nGPU job scripts\n#!/bin/bash -l\n#SBATCH -J pGcat_SETINDEX\n#SBATCH -N 1\n#SBATCH --ntasks-per-node=1\n#SBATCH --mem-per-cpu=5GB\n#SBATCH --time=72:00:00\n#SBATCH -A plgribo3gpu\n#SBATCH --gres=gpu\n#SBATCH -p plgrid-gpu\n#SBATCH --output=output.out\n#SBATCH --error=error.err\ncd $SLURM_SUBMIT_DIR\nsrun /bin/hostname\n\nperl calc_entanglement_number.pl -i ../../setup/3cla_m_clean_ca.cor -t ../../SETINDEX/cat3_SETINDEX_prod.dcd -o ./"
  },
  {
    "objectID": "posts/Amino-acid-table/index.html",
    "href": "posts/Amino-acid-table/index.html",
    "title": "Amino acid table",
    "section": "",
    "text": "Amino acids table with their properties\n21 amino acids make up proteins.\n\n(Source: Wikipedia)"
  },
  {
    "objectID": "posts/Create-env-for-openmm-cg-simulations/Openmm-coarse-grained-simulations.html",
    "href": "posts/Create-env-for-openmm-cg-simulations/Openmm-coarse-grained-simulations.html",
    "title": "Openmm Coarse-grained Simulations",
    "section": "",
    "text": "#!/bin/bash\n#SBATCH --partition plgrid\n#SBATCH --job-name cryosparc-master\n#SBATCH --nodes 1\n#SBATCH --ntasks-per-node 1\n#SBATCH --mem 15GB\n#SBATCH --time 72:00:00\n#SBATCH -C localfs\n#SBATCH -A plgrisa-cpu\n#SBATCH --dependency=singleton\n#SBATCH --output cryosparc-master-log-%J.txt\n#SBATCH --signal=B:2@240\n\necho \"Job run\" > test.txt"
  },
  {
    "objectID": "posts/Create-env-for-openmm-cg-simulations/Openmm-coarse-grained-simulations.html#install-packages",
    "href": "posts/Create-env-for-openmm-cg-simulations/Openmm-coarse-grained-simulations.html#install-packages",
    "title": "Openmm Coarse-grained Simulations",
    "section": "Install packages",
    "text": "Install packages\nconda install -c openmm=7.7 parmed mdtraj\nNotes on cluster information:\n* local machine: (py310) openMM 7.7+ cudatoolkit 11.6\n* Plgrid: (py310) openMM 7.7+ cudatoolkit 10.2\n* ACI: (base) OpenMM 7.7+ cudatoolkit 11.7\n* Ares: openMM 7.7 + cudatoolkit 11.6 ( GPU Tesla V100)\n\nJob with GPU\n#!/bin/bash\n#SBATCH --job-name ares_gpu\n#SBATCH --nodes 1\n#SBATCH --partition plgrid-gpu-v100\n#SBATCH --gres=gpu:1\n#SBATCH --ntasks-per-node 1\n#SBATCH --mem 15GB\n#SBATCH --time 48:00:00\n#SBATCH -C localfs\n#SBATCH -A plgrisa-gpu\n#SBATCH --dependency=singleton\n#SBATCH --output cryosparc-master-log-%J.txt\n#SBATCH --signal=B:2@240\n\n## prometheus\n#source /net/people/plgqvuvan/anaconda3/etc/profile.d/conda.sh\n## ares\n\ncd $SLURM_SUBMIT_DIR\n\nconda init bash\nsource /net/people/plgrid/plgqvuvan/plggligroup/qvv5013/anaconda3/etc/profile.d/conda.sh\nconda activate py310\nmodule add cuda/11.6.0\necho \"NVIDIA-DRIVER version:\"`nvidia-smi`\n\npython single_run_extend.py -f control.cntrl"
  },
  {
    "objectID": "posts/Create-env-for-openmm-cg-simulations/Openmm-coarse-grained-simulations.html#interactive-mode-on-ares",
    "href": "posts/Create-env-for-openmm-cg-simulations/Openmm-coarse-grained-simulations.html#interactive-mode-on-ares",
    "title": "Openmm Coarse-grained Simulations",
    "section": "interactive mode on ares:",
    "text": "interactive mode on ares:\n\nusing GPU: srun -p plgrid-gpu-v100 --nodes=1 --ntasks=1 --mem=5GB --time=0-1 --pty bash\nusing CPU: srun -p plgrid --nodes=1 --ntasks=1 --mem=5GB --time=0-1 --pty bash"
  },
  {
    "objectID": "posts/linux-tips/count-line-in-file.html",
    "href": "posts/linux-tips/count-line-in-file.html",
    "title": "Counting number of line from file in linux",
    "section": "",
    "text": "Sometime, after perform a long analysis of many simulations. We want to make sure if the analysis is done automatically, instead of looking into single file one-by-one, we can use bash script to do so.\n#!/bin/bash\nfor i in {1..100}\ndo\n        #echo \"$i\"\n        nl=$(wc -l < $i/G_traj_${i}.dat)\n        if [ $nl -eq 400008 ]; then\n                echo \"traj $i :  $nl --- DONE\"\n        else\n                echo \"traj $i :  $nl --- Has not been DONE\"\n        fi\n\ndone\nIn this example, we loop through all simulations (1 to 100) and use command: wc -l < $i/G_traj_${i}.dat to count the number of lines in file. we assign the output from this command to nl variable by packing previous command by $(command)"
  },
  {
    "objectID": "posts/python/Problems-regarding-ipywidgets.html",
    "href": "posts/python/Problems-regarding-ipywidgets.html",
    "title": "Problems regarding ipywidgets has no attribute ‘version_info’",
    "section": "",
    "text": "With the recent update of ipywidgets, Pyemma, MDAnalysis and some other package encounter problems with ipywidgets.\nThe dirty solution is install version ipywidgets<8. version 7.7 may help and wait till developers of ipywidgets fix it."
  },
  {
    "objectID": "posts/python/Beautiful-plot-with-Matplotlib.html",
    "href": "posts/python/Beautiful-plot-with-Matplotlib.html",
    "title": "Make a beautiful plot using Matplotlib",
    "section": "",
    "text": "When writing a paper, a beautiful figure is very important. Before, I used Gnuplot or XMGRACE to make figures because it is easy to config.\nRecently I moved to Matplotlib and used it in many of my projects, found it convenient to make plots and tweak them to produce beautiful figures.\nHere are some snippet for reference to easily look back."
  },
  {
    "objectID": "posts/python/Beautiful-plot-with-Matplotlib.html#import-library",
    "href": "posts/python/Beautiful-plot-with-Matplotlib.html#import-library",
    "title": "Make a beautiful plot using Matplotlib",
    "section": "Import library",
    "text": "Import library\n\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom scipy.ndimage import gaussian_filter1d\nimport matplotlib\n%matplotlib notebook\n\nConfig for matplotlib\n\n# config for matplotlib\nfont = {'family' : 'arial',\n        'weight' : 'normal',\n        'size'   : 12}\n\nmatplotlib.rc('font', **font)\nmatplotlib.rcParams['axes.spines.right'] = False\nmatplotlib.rcParams['axes.spines.top'] = False\nmatplotlib.rcParams['axes.linewidth'] = 2 #set the value globally\n\n# set tick width\nmatplotlib.rcParams['xtick.major.size'] = 6\nmatplotlib.rcParams['xtick.major.width'] = 2\nmatplotlib.rcParams['ytick.major.size'] = 6\nmatplotlib.rcParams['ytick.major.width'] = 2\n\n\n# Create a fake data:\nx = np.arange(0, 2*np.pi, 2*np.pi/1000)\ny = np.sin(x)\ny2 = np.cos(x)\n\n\nfig = plt.figure(figsize=(8,5))\nplt.plot(x,y, color='black', lw=2, label='sin(x)', alpha=0.8)\nplt.plot(x,y2, color='red', lw=2, label='cos(x)', alpha=0.8)\n\n# Plot horizontal\nplt.axhline(y = 0.0, color = 'blue', linestyle = '--', alpha=0.5)\n\n# Config Legends and labels\n# set yticks\nplt.yticks([-1, 0, 1], ['first', 'second', ''])\n\nplt.legend(loc='upper center', ncol=2)\nplt.xlim(0, 2*np.pi)\nplt.ylim(-1,1)\nplt.ylabel(r'$f_x$') #latex type\nplt.xlabel('x')\n\n# To save figure with high DPI, uncomment following line: the more dpi, the clearer figure but large file\nplt.savefig('Demo_matplotlib.png', dpi=1200)"
  },
  {
    "objectID": "tools.html",
    "href": "tools.html",
    "title": "Tools",
    "section": "",
    "text": "hpsOpenMM\nOpenMM codebase for IDP which uses HPS-Urry/HPS-KR force field\nhps: hydropathy scale. Currently, there are three models are supported:\n\nhps_urry: Hydropathy according to Urry scale (default, Recommended).\nhps_kr: Kapcha-Rossy scale. This model has parameters for nucleic acids and post-translational modification residues.\nhps_ss: hps_urry with bonded potential.\nother models can be easily implemented by defining them in hps/parameters/model_parameters.py\n\nThe package is ready for studying various problems such as, conformation dynamics of single chain, LLPS …\n(Source code is available on Github)\nCheck out docs for more details here\n\n\nentanglement Analysis\nThere are two main version of entanglement analysis:\n\nThe first one is characterized by the linking number of loops and the open terminal, which is composed of the whole terminal. Please check this paper for more details. This kind of entanglement can be calculated by the following code which is developed by Ian Sitarik (Penn State). Python version\nThe maximum linking number between the loop and all possible segments of the terminal is calculated by the following code: Julia version. There are two versions for this kind of entanglement calculation, in python and Julia. julia is much faster than Python."
  }
]